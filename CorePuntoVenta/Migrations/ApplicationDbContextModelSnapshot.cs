// <auto-generated />
using System;
using CorePuntoVenta;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CorePuntoVenta.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CorePuntoVenta.Domain.Administracion.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "CAJA"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "ORDENES"
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Administracion.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("correo");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<int>("SucursalId")
                        .HasColumnType("integer")
                        .HasColumnName("sucursal_id");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("SucursalId");

                    b.ToTable("usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Correo = "admin@ml-grupo.com.mx",
                            Nombre = "Admin",
                            Password = "$2a$12$yRELEkrsM7oesblMcmu60uR67uxaNQAhd3cMU7ZthsnQmRQH6EIYe",
                            RolId = 1,
                            SucursalId = 1
                        },
                        new
                        {
                            Id = 2,
                            Correo = "caja1@ml-grupo.com.mx",
                            Nombre = "Caja",
                            Password = "$2a$12$yRELEkrsM7oesblMcmu60uR67uxaNQAhd3cMU7ZthsnQmRQH6EIYe",
                            RolId = 2,
                            SucursalId = 1
                        },
                        new
                        {
                            Id = 3,
                            Correo = "ordenes1@ml-grupo.com.mx",
                            Nombre = "Ordenes",
                            Password = "$2a$12$yRELEkrsM7oesblMcmu60uR67uxaNQAhd3cMU7ZthsnQmRQH6EIYe",
                            RolId = 3,
                            SucursalId = 1
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Cajas.Models.Caja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("EfectivoDisponible")
                        .HasColumnType("double precision")
                        .HasColumnName("efectivo_disponible");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hosname");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("NumeroCaja")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero_caja");

                    b.Property<int>("SucursalId")
                        .HasColumnType("integer")
                        .HasColumnName("sucursal_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.ToTable("cajas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EfectivoDisponible = 0.0,
                            Hostname = "caja",
                            Ip = "192.168.0.2",
                            NumeroCaja = "1",
                            SucursalId = 1
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Cajas.Models.Corte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CajaId")
                        .HasColumnType("integer")
                        .HasColumnName("caja_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer")
                        .HasColumnName("empleado_id");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<double>("MontoCorte")
                        .HasColumnType("double precision")
                        .HasColumnName("monto_corte");

                    b.Property<double>("MontoEnCaja")
                        .HasColumnType("double precision")
                        .HasColumnName("monto_en_caja");

                    b.Property<double>("MontoInicial")
                        .HasColumnType("double precision")
                        .HasColumnName("monto_inicial");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("cortes");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Cajas.Models.ItemCaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CajaId")
                        .HasColumnType("integer")
                        .HasColumnName("caja_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer")
                        .HasColumnName("empleado_id");

                    b.Property<double>("Monto")
                        .HasColumnType("double precision")
                        .HasColumnName("monto");

                    b.Property<string>("Motivo")
                        .HasColumnType("text")
                        .HasColumnName("motivo");

                    b.Property<int>("Movimiento")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("items_caja");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Camionetas.Models.Camioneta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Placas")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("placas");

                    b.HasKey("Id");

                    b.ToTable("camionetas");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Clientes.Models.Abono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<float>("Monto")
                        .HasColumnType("real")
                        .HasColumnName("monto");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("abonos");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Clientes.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DireccionId")
                        .HasColumnType("integer")
                        .HasColumnName("direccion_id");

                    b.Property<string>("NombreComercial")
                        .HasColumnType("text")
                        .HasColumnName("nombre_comercial");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("razon_social");

                    b.Property<string>("Rfc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rfc");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DireccionId");

                    b.ToTable("clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DireccionId = 1,
                            NombreComercial = "AARON",
                            RazonSocial = "AARON",
                            Rfc = "GOMA971007BD8"
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Clientes.Models.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Adeudo")
                        .HasColumnType("real")
                        .HasColumnName("adeudo");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<float>("Saldo")
                        .HasColumnType("real")
                        .HasColumnName("saldo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("cuentas");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Direcciones.Models.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Calle")
                        .HasColumnType("text")
                        .HasColumnName("calle");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("Colonia")
                        .HasColumnType("text")
                        .HasColumnName("colonia");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<string>("NumeroExterno")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero_externo");

                    b.Property<string>("NumeroInterior")
                        .HasColumnType("text")
                        .HasColumnName("numero_interior");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("direcciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calle = "calle",
                            CodigoPostal = "09660",
                            Colonia = "Bugambilia",
                            NumeroExterno = "1",
                            NumeroInterior = "2"
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Empleados.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("SucursalId")
                        .HasColumnType("integer")
                        .HasColumnName("sucursal_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.ToTable("empleados");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApellidoMaterno = "López",
                            ApellidoPaterno = "Hernandez",
                            Nombre = "Rogelio",
                            SucursalId = 1
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Ordenes.Models.EstatusOrden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("estatus_orden");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "CREADA"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "PENDIENTE"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "PAGADA"
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Ordenes.Models.ItemOrden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Kilos")
                        .HasColumnType("double precision")
                        .HasColumnName("kilos");

                    b.Property<int?>("OrdenId")
                        .HasColumnType("integer")
                        .HasColumnName("orden_id");

                    b.Property<double>("PrecioUnitario")
                        .HasColumnType("double precision")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    b.Property<double>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrdenId");

                    b.HasIndex("ProductoId");

                    b.ToTable("items_orden");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Ordenes.Models.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CajaId")
                        .HasColumnType("integer")
                        .HasColumnName("caja_id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer")
                        .HasColumnName("empleado_id");

                    b.Property<int>("EstatusOrdenId")
                        .HasColumnType("integer")
                        .HasColumnName("estatus_orden_id");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<double>("Impuestos")
                        .HasColumnType("double precision")
                        .HasColumnName("impuestos");

                    b.Property<double>("Kilos")
                        .HasColumnType("double precision")
                        .HasColumnName("kilos");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("referencia");

                    b.Property<double>("Subtotal")
                        .HasColumnType("double precision")
                        .HasColumnName("subtotal");

                    b.Property<double>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstatusOrdenId");

                    b.ToTable("ordenes");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Ordenes.Models.ReferenciaOrden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Folio")
                        .HasColumnType("integer")
                        .HasColumnName("folio");

                    b.Property<string>("Prefijo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prefijo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("referencias_orden");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Pagos.Models.MetodoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("metodos_pago");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "EFECTIVO"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "TARJETA DE CRÉDITO/DEBITO"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "CHEQUE"
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Pagos.Models.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CajaId")
                        .HasColumnType("integer")
                        .HasColumnName("caja_id");

                    b.Property<double>("Cambio")
                        .HasColumnType("double precision")
                        .HasColumnName("cambio");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer")
                        .HasColumnName("empleado_id");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<int>("MetodoPagoId")
                        .HasColumnType("integer")
                        .HasColumnName("metodo_pago_id");

                    b.Property<double>("MontoRecibido")
                        .HasColumnType("double precision")
                        .HasColumnName("monto_recibido");

                    b.Property<int>("OrdenId")
                        .HasColumnType("integer")
                        .HasColumnName("orden_id");

                    b.Property<string>("Referencia")
                        .HasColumnType("text")
                        .HasColumnName("referencia");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("MetodoPagoId");

                    b.HasIndex("OrdenId");

                    b.ToTable("pagos");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Productos.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Pollo"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Marinado"
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Productos.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("categoria_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<double>("PrecioUnitario")
                        .HasColumnType("double precision")
                        .HasColumnName("precio_unitario");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            Nombre = "POLLO ADOBADO",
                            PrecioUnitario = 0.0
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Sucursales.Models.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DireccionId")
                        .HasColumnType("integer")
                        .HasColumnName("direccion_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DireccionId");

                    b.ToTable("sucursales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DireccionId = 1,
                            Nombre = "AZTECAS"
                        });
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Administracion.Models.Usuario", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Administracion.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Sucursales.Models.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Cajas.Models.Caja", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Sucursales.Models.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Cajas.Models.Corte", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Cajas.Models.Caja", "Caja")
                        .WithMany()
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Empleados.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caja");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Cajas.Models.ItemCaja", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Cajas.Models.Caja", "Caja")
                        .WithMany("Items")
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Empleados.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caja");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Clientes.Models.Cliente", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Direcciones.Models.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("DireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Clientes.Models.Cuenta", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Clientes.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Empleados.Models.Empleado", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Sucursales.Models.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Ordenes.Models.ItemOrden", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Ordenes.Models.Orden", "Orden")
                        .WithMany("ItemsOrden")
                        .HasForeignKey("OrdenId");

                    b.HasOne("CorePuntoVenta.Domain.Productos.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Ordenes.Models.Orden", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Cajas.Models.Caja", "Caja")
                        .WithMany()
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Clientes.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Empleados.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Ordenes.Models.EstatusOrden", "EstatusOrden")
                        .WithMany("Ordenes")
                        .HasForeignKey("EstatusOrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caja");

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("EstatusOrden");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Pagos.Models.Pago", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Cajas.Models.Caja", "Caja")
                        .WithMany()
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Clientes.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Empleados.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Pagos.Models.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MetodoPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorePuntoVenta.Domain.Ordenes.Models.Orden", "Orden")
                        .WithMany()
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caja");

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("MetodoPago");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Productos.Models.Producto", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Productos.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Sucursales.Models.Sucursal", b =>
                {
                    b.HasOne("CorePuntoVenta.Domain.Direcciones.Models.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("DireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Cajas.Models.Caja", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Ordenes.Models.EstatusOrden", b =>
                {
                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("CorePuntoVenta.Domain.Ordenes.Models.Orden", b =>
                {
                    b.Navigation("ItemsOrden");
                });
#pragma warning restore 612, 618
        }
    }
}
